// ### –û–°–ù–û–í–´ JS ###
// –ó–∞–¥–∞–Ω–∏–µ 1: –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
// –ù–∞ –≤—Ö–æ–¥–µ: –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç, –ª—é–±–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
// –ù–∞ –≤—ã—Ö–æ–¥–µ: —Å—Ç—Ä–æ–∫–∞, —Å —Ç–∏–ø–æ–º –≤—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞

// function whatType(a){
//     return typeof(a);
// }


// –ó–∞–¥–∞–Ω–∏–µ 2: –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –ø–æ—á–µ–º—É?
// const a = () => console.log("a");
// const b = () => console.log("b");
// const c = a || b ? a() : b();
// console.log(c);
// –û—Ç–≤–µ—Ç: a undefined, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è a(), 
// –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–ø–µ—á–∞—Ç–∞–µ—Ç "a", –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Ç–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ 
// –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è c –±—É–¥–µ—Ç undefined



// ### –§—É–Ω–∫—Ü–∏–∏ ###
// –ó–∞–¥–∞–Ω–∏–µ 1: –ù—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å—É–º–º—É –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤,
// –µ—Å–ª–∏ —Ç–∏–ø –∞—Ä–≥—É–º–µ–Ω—Ç–∞ - —á–∏—Å–ª–æ. –í—ã–∑–æ–≤–æ–≤ –í–°–ï–ì–î–ê 5
// –ü—Ä–∏–º–µ—Ä: count(3)(2)(1)(5)(7) // 18
// count(3)(null)(1)('asad')() // 4

// function count(num) {
//     if (typeof num !== 'number') {
//         num = 0;
//     }
//     i = 0
//     function innerCount(nextNum) {
//         if (typeof nextNum === 'number') {
//             num += nextNum;
//         }        
//         if(++i === 4) return num;
//         return innerCount;
//     }
//     return innerCount;
// }
  


// ### –û–±—ä–µ–∫—Ç—ã –∏ –ú–∞—Å—Å–∏–≤—ã ###
// –ó–∞–¥–∞–Ω–∏–µ 1: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é convertArrToObj, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞ –≤—Ö–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
// –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π, –∞ –Ω–∞ –≤—ã—Ö–æ–¥ –æ—Ç–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤
// –º–∞—Å—Å–∏–≤–µ, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–∞–º —ç–ª–µ–º–µ–Ω—Ç
// –ü—Ä–∏–º–µ—Ä: const arr = [1, null, 'test', undefined]
// const obj = convertArrToObj()
// console.log(obj) // { 0: 1, 1: null, 2: 'test', 3: undefined }

// function convertArrToObj(arr){
//     let obj = new Object();
//     for(let i = 0; i < arr.length; i++){
//         obj[i] = arr[i];
//     }
//     return obj;
// }


// –ó–∞–¥–∞–Ω–∏–µ 2: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é countFromArr, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç
// –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Å—Å–∏–≤–∞. –ù–∞ –≤—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –º–∞—Å—Å–∏–≤, –Ω–∞ –≤—ã—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ–º
// –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - —ç—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ - –µ–≥–æ –∫–æ–ª-–≤–æ –≤ –º–∞—Å—Å–∏–≤–µ
// –ü—Ä–∏–º–µ—Ä: const arr = [1, 1, 1, 'test', 'test']
// const res = countFromArr(arr)
// console.log(res) // { 1: 3, test: 2 } 

// function countFromArr(arr){
//     let obj = new Object();
//     arr.forEach(element => {
//         if(obj.hasOwnProperty(element))
//             obj[element]++; 
//         else
//             obj[element] = 1;
//     });
//     return obj;
// }


// –ó–∞–¥–∞–Ω–∏–µ 3: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é groupByField, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç
// —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—é —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. 
// –ù–∞ –≤—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è, –Ω–∞ –≤—ã—Ö–æ–¥
// –æ–±—ä–µ–∫—Ç - –≥–¥–µ –∫–ª—é—á–æ–º —è–≤–ª—è–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –æ–±—ä–µ–∫—Ç–∞, –∞ –∑–Ω–∞—á–µ–Ω–∏–µ–º - –º–∞—Å—Å–∏–≤
// –æ–±—ä–µ–∫—Ç–æ–≤ –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ —Ä–∞–≤–Ω–æ —ç—Ç–æ–º—É –∫–ª—é—á—É ü§™ (–Ω–∞–¥–µ—é—Å—å –≤ –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ—Ç
// –ø–æ–Ω—è—Ç–Ω–µ–π)
// –ü—Ä–∏–º–µ—Ä: const arr = [{test: 1},{test: 2},{test: 3},{test: 1},{test: 1}]
// const res = groupByField(arr, 'test')
// console.log(res) // { 1: [{test: 1}, {test: 1}, {test: 1}], 2: [{test: 2}], 3: [{test: 3}]}

// function groupByField(arr, string){
//     let obj = new Object();
//     arr.forEach(element => {
//         if(obj.hasOwnProperty(element[string]))
//             obj[element[string]].push(element); 
//         else
//             obj[element[string]] = [element];
//     });
//     return obj;
//}



// ### –ü—Ä–æ—Ç–æ—Ç–∏–ø—ã, –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ ###
// –ó–∞–¥–∞–Ω–∏–µ 1: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é plus()
// –ü—Ä–∏–º–µ—Ä: (1).plus(2); // 3

// Number.prototype.plus = function(value) {
//     return this + value;
// };



// ### –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ JS ###
// –ó–∞–¥–∞–Ω–∏–µ 1: –ß—Ç–æ –≤—ã–≤–µ–¥–µ—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å?
// console.log("start");
// setTimeout(() => console.log("timeout"), 0);
// new Promise((resolve, reject) => {
// console.log("promise constructor");
// reject();
// })
// .then(() => console.log("p1"))
// .catch(() => console.log("p2"))
// .catch(() => console.log("p3"))
// .then(() => console.log("p4"))
// .then(() => console.log("p5"));
// console.log("final")

// start
// promise constructor
// final
// p2
// p4
// p5
// timeout